{"version":3,"sources":["components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["CardList","robots","Error","Scroll","props","style","overflow","border","height","children","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAuBeA,EApBE,SAAC,GAAe,EAAbC,OAEb,MAAM,IAAIC,MAAM,cCKRC,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAO,kBAAmBC,OAAO,UACjEJ,EAAMK,WCUKC,EAZG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACA,yBAAKC,UAAU,OACd,2BAAOA,UAAU,mCACjBC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCaGK,E,kDAnBd,WAAYb,GAAQ,IAAD,8BAClB,cAAMA,IACDc,MAAQ,CACZC,UAAU,GAHO,E,8DAOFC,EAAOC,GACtBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI3B,OAAGG,KAAKJ,MAAMC,SACN,yDAEDG,KAAKlB,MAAMK,a,GAhBOe,aCsEZC,G,wDApDd,aAAe,IAAD,8BACd,gBAaEC,eAAiB,SAACC,GAGjB,EAAKJ,SAAS,CAAEZ,YAAagB,EAAMC,OAAOC,SAf1C,EAAKX,MAAQ,CAChBjB,OAAQ,GACRU,YAAa,IAJC,E,gEAQO,IAAD,OACbmB,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKX,SAAS,CAAEtB,OAAQiC,S,+BASvC,MACyBZ,KAAKJ,MAA5BjB,EADF,EACEA,OAAQU,EADV,EACUA,YACXwB,EAAiBlC,EAAOmC,QAAO,SAAAC,GAElC,OAAOA,EAAMC,KAAKC,cAAcC,SAAS7B,EAAY4B,kBAGxD,OAAQtC,EAAOwC,OAGd,yBAAK5B,UAAU,MAChB,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAcU,KAAKI,iBAC5B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUzB,OAAQkC,OAPvB,wBAAItB,UAAU,SAAd,e,GA7BeW,cCPEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.d8593a67.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n\tif(true) {//測試一下錯誤真的發生的時候 網頁變怎樣;使用者看到的是ErrorB..js裡面寫的Oooops. that is not good.\r\n       throw new Error('Nooooooo!');//會看到錯誤是因為處於開發人員環境,ErrorB..非常適合放在已開發的產品中 使用者看不到開發人員才看得到\r\n\t}\r\n\treturn (\r\n            <div>\r\n\t\t\t    {\r\n\t  robots.map((user, i) => {\r\n      return (<Card \r\n      key={i} \r\n      id={robots[i].id} \r\n      name={robots[i].name} \r\n      email={robots[i].email}\r\n\t\t/>);\r\n\t})\r\n\t}\r\n\t</div>\r\n\t\t\t);\r\n} \r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {//每個props都會有children div的style也要加上{}才能產生css的效果,overflowY在css是overflow-y\r\n\treturn (\r\n\t\t<div style={{ overflow: 'scroll', border:'5px solid black', height:'800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n   );\r\n};\r\n\r\nexport default Scroll;//這功能主要就是就可以滾動卡片看機器人啦,react就操縱DOM,現在狀態是什麼? 你要什麼狀態? 然後快速反應","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {//({})會抓取props的objects還有它的properties serachfield這邊用不到 之後會刪掉\r\n\treturn(\r\n\t<div className='pa2'>\r\n\t\t<input className='pa2 ba b--green bg-lightest=blue'\r\n\t\ttype='search' \r\n\t\tplaceholder='search robots'\r\n\t\tonChange={searchChange}//onChange是html event的一種 有給網址自己看\r\n\t\t/>\r\n\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';//error boundry是react自帶的一個功能\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidCatch(error, info) {//lifecyle method的一種 如果有錯誤發生 這個就會跑 通常會帶兩個參數error,info\r\n   this.setState({ hasError: true})//設定真的有錯再跑\r\n}\r\n\r\n\trender() {//上面的ErrorBoundry可以抓取CardList的數據 如果有錯 它會抓到\r\n\t\tif(this.state.hasError) {//就如果為true 會return下面的描述\r\n\t\t\treturn <h1>Oooops. that is not good.</h1>\r\n\t\t}//false就會return這個(這邊的props.chilren就是CardList)\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';//../就可以找不在同一個資料夾的檔案\r\nimport Scroll from '../components/Scroll';//讓CardList可以滾動\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundry from '../components/ErrorBoundry';//錯誤發生的提示\r\nimport './App.css'\r\n\r\n//State 事實上是個object  \r\n// 描述這個應用程式 是可以改變的 在這裡是要描述robots 把輸入searchbox的值跟CardList(robotarray)做連接 \r\n// 之前上課的圖(影片200的介紹react)dataflow parent跟child可連動\r\n// props(child)就從state出來的\r\n// parent==>state==>child(props)\r\n\r\n\r\n// const state = {\r\n// \trobots: robots,\r\n// \tsearchField: ''\r\n// }\r\n\r\nclass App extends Component {\r\n\tconstructor() {//這在第13節的148影片有寫過,lifecycle methods的一種有3大類 mounting自己看213裡面的網站\r\n\tsuper()\r\n    this.state = {//this代表App\r\n\trobots: [],//從別的網站抓數據\r\n\tsearchfield: ''\r\n           }\r\n\t}\r\n\r\n\tcomponentDidMount() {//這個是react自有 不是自創功能 mouting的4種方法會按順序讀取\r\n        fetch('https://jsonplaceholder.typicode.com/users')//就從這邊抓數據,fetch也是window object,就製造需求的一種工具 (以後會講)\r\n\t        .then(response => response.json())\r\n\t        .then(users => {this.setState({ robots: users})});   \r\n\t}\r\n\r\n   onSearchChange = (event) => {//這是自創功能 SearchBox.js的input每次改變時會觸發 \r\n   \t//對照dataflow的圖,在這個project裡,parent是App===>child是searchbox,cardlist\r\n   \t//每次input改變,searchbox裡的onChange改變 會call app裡的這個function\r\n   \tthis.setState({ searchfield: event.target.value })//react裡的一個method 要讓state改變發生作用 就要寫這個\r\n   }\r\n\r\n\trender() {//lifecycle method,root更新後 construtor跑完就換跑這邊 render是mouting同時也是updating 所以會跑兩次\r\n \t\t const { robots, searchfield } =this.state;\r\n\t\t const filteredRobots = robots.filter(robot =>{//影片146 advaced javascript有上 還是不懂就回去看\r\n      \t// 這個功能就是不管大小寫 找出robotArray裡面包含的字\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n      // console.log(event.target.value);//會給出搜尋的值\t\r\n      })\r\n\t\t return !robots.length ?\r\n\t\t <h1 className='tc f1'>Loading</h1>:\r\n\t ( \r\n\t\t  <div className='tc'>\r\n\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t   <Scroll>\r\n\t\t    <ErrorBoundry>\r\n\t\t      <CardList robots={filteredRobots} />\r\n\t\t    </ErrorBoundry>\r\n\t\t   </Scroll>\r\n\t\t  </div>\r\n\t );\r\n   }\r\n }\r\n\r\n// const App = () => {\r\n// \treturn(\r\n// \t<div className='tc'>\r\n// \t\t<h1>RoboFriends</h1>\r\n// \t\t<SearchBox />\r\n// \t  <CardList robots={robots}/>\r\n// \t</div>\r\n\r\n// \t\t);\r\nexport default App;\r\n\r\n//這個App有兩個state(robots,serachfield),並使用class extends語法,使用construtor創造this.state\r\n//this.state可以改變或描述這個App,virtual DOM(Js object)收集state所有數據,然後react把這些數據當作props 傳到render跟下面的return裡面作用\r\n//讓他們變成很純粹的功能\r\n//創造了onSerachChange這個功能,每次SearchBox(onChange on the input)有改變 就會跑onSerachchange\r\n//onSear....一跑,state(searchfield)就會更新,不管我們在serach bar上面輸入了什麼\r\n//這些輸入的值會連接到Cardlist,告訴他我們要匹配(filter toLowerCase includes)searchfield\r\n//不是傳送this.state.robots而是filteredRobots\r\n//robots不會被傳 有必要成為state的一部分嗎?目前看來是不用,因為有import { robots } from './robots';反正就之後會用到就是了(API?)\r\n//API就是當這個網站被讀取的時候,製造一個需求去網路世界某些地方(jsonplaceholder)並從該伺服器抓取數據 ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';//有了react import from新語法就能使用了\nimport ReactDOM from 'react-dom';//react可以用在許多方面(手機app也可以用 VR也行) 這邊是用在建網站 所以是dom(document)\nimport './index.css';//也能直接加css\nimport App from './containers/App'//開頭一定要大寫 ,要從哪個檔案進來 App是所有components的parent \nimport * as serviceWorker from './serviceWorker';//就系統自帶的 可以先不用管它\nimport 'tachyons';//去json確認有之後 在這邊加上 接著去Hello.js\n//如果有多個結果要輸出就要加上{} {}裡面可以加上robots, cats就會特定輸出cats一個結果\n\n\nReactDOM.render(<App />, document.getElementById('root'));//mouting在這邊觸發\n//greeting={} 這段也像html attribute(properties) 寫了會有錯 要去hello.js用this修 \n// {}裡面是值 參數就是Hello.js裡的props\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}